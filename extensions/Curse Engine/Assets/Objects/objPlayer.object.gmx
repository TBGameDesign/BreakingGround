<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMaskVertical</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set animation speeds to restore the player to should the game become paused
idle_animation_speed = .25;
walk_animation_speed = .5;

//set the player's state to "idle" even though it may be changed later
state = "idle";
//variables used with scrUpdatePosition
acceleration = 0;
frames = 0;
frameCounter = 0;

yCounter = 0;//yCounter used for playing the landing sound effect which has been removed so add your own
frames_shown = 0;
//variables used for gravity and jumping coded by hand(not using the built-in system)
vAcceleration = 0;
maxJumpHeight = 16;
maxFallSpeed = 8;
vAccelBase = 8;
jumpCount = 1;//useful to check if you want to perform double jumps

//some bools that affect if the player can perform actions and how they perform them
landed = false;
crouching = false;
canBeHurt = true;
attacking = false;
drawRed = false;
throwSubItem = false;
//more bools used to determine if actions can be performed
//should be easy to decipher
canMove = true;
canCrouch = true;
canJump = true;
canAttack = true;
turning = false;
onSlope = false;

restartRoom = false;//temporary bool
imageSpeedToStore = 0;//store the image_speed whenever you are pausing the player




attackSpeed = .3;//used for attack animation speed
attackMaxFrames = 0;//different attacks will be using different max frames to cycle through

//setting new x and y coordinates as well as carrying over the state from the previous room
image_xscale = global.playerXscale;
//state = global.playerState;//if we transition from an area while we are, say, jumping, we want to still be jumping when we get to the next room

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (landed == true)
{
    landed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.paused == false)//make sure the game isnt paused
{

    //if for some reason there is nothing beneath the player and they are no considered to be jumping or falling, move the player object to the ground to prevent hovering/floating
    if (place_free(x,y+1) &amp;&amp; !place_meeting(x,y+1,objSlopesParent))
    {
        if (state != "jump" &amp;&amp; state != "fall" &amp;&amp; state != "dead")
            move_contact_solid(270,8);
    }
    else if (place_meeting(x,y+1,objSlopesParent))//if we are making contact with a slope object
    {
        onSlope = true;//we are now considered on a slope
    }    
        
            
    if (acceleration != 0)//if our acceleration is anything but 0, we run our script to update our position
    {
        if (!place_meeting(x+(1*image_xscale),y,objSolidParent))
            scrUpdatePosition();  
    }
    //at the end of the step, create a ghost trail effect object
    if (state != "idle" &amp;&amp; state != "dead")   
        instance_create(x,y,objPlayerTrail);
        
}
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.paused == false)//make sure the game isnt paused
{

    if (!place_meeting(x,y+1,objSolidParent) &amp;&amp; onSlope == false )//checking to see if anything is beneath the player, if not, the player's state will be changed to falling
    {
        if (state != "jump" &amp;&amp; state != "fall" &amp;&amp; state != "dead")
        {
            mask_index = sprMaskVertical;//collision mask
            image_index = 0;
            state = "fall";//nothing under us, so we are falling
            sprite_index = sprFall;
            image_speed = walk_animation_speed/1.5;
            canJump = false;
            jumpCount = 0;
        }
    }
    //if for some reason there is nothing beneath the player and they are no considered to be jumping or falling, move the player object to the ground to prevent hovering/floating
    if (place_free(x,y+1) &amp;&amp; !place_meeting(x,y+1,objSlopesParent))
    {
        if (state != "jump" &amp;&amp; state != "fall" &amp;&amp; state != "dead")
            move_contact_solid(270,8);
    }
    else if (place_meeting(x,y+1,objSlopesParent))//if we are making contact with a slope object
    {
        onSlope = true;//we are now considered on a slope
    }       
    if (acceleration != 0)//if our acceleration is anything but 0, we run our script to update our position
    {
            scrUpdatePosition();  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.paused == false)//make sure the game isnt paused
{

    if (place_meeting(x+1,y,objFullSolid))//check to make sure we arent stuck in a wall
    {
        x = x - 1;
    }
    if (place_meeting(x-1,y,objFullSolid))//check to make sure we arent stuck in a wall
    {
        x = x + 1;
    }
    //FALLING when not on the ground(ie walking off ledges)
    if (!place_meeting(x,y+1,objSolidParent) &amp;&amp; onSlope == false)
    {
        if (state != "jump" &amp;&amp; state != "fall" &amp;&amp; state != "dead")
        {
            image_index = 0;//make sure we are back to the beginning of our cycle
            state = "fall";//set the state
            sprite_index = sprFall;//set the appropriate sprite image
            image_speed = walk_animation_speed/1.5;//set the animation speed to your liking
            canJump = false;//no, we can no longer jump since we are falling
            jumpCount = 0;//prevents us from jumping
        }
    }
    y = round(y);//used to make sure Y is always a whole number without a decimal
    //State MANAGER----------------------------------------------------------------------------------------------
    //How this works is that code is executed based up the player's state.
    //It uses literal strings based on the action for easy reading/deciphering
    //Easy to plug-n-play new states
    //Just start right after the switch block here near the top to add your own state
    switch (state)//THIS IS THE GREAT STATE MANAGER
    {
        case "door"://walking into a door
        {
            if (instance_exists(objPlayerMelee))//is there a weapon?
            {
                with (objPlayerMelee)
                {
                    instance_destroy();//destroy the weapon if there is one
                }
            } 
            canMove = false;//no moving while door is opening
            canCrouch = false;//^^
            attacking = false;//^^
            crouching = false;//^^
            canBeHurt = false;//^^
            landed = false;//player is obviously not landing
            turning = false;//you arent turning around
            onSlope = false;//doors should not be on slopes anyway
            canJump = false;//player cannot jump while a door is opening
            jumpCount = 0;//another redundancy check to prevent jumping
            acceleration = 0;//another redundancy check to make sure the player is not moving
            sprite_index = sprIdle;//set to the idle sprite
            image_speed = .2;//set this according to your needs
            break;
        }
        case "dead"://the player is dead, so let's throw him into the air dramatically :)  Change this or remove to your liking
        {   
            if (instance_exists(objPlayerMelee))
            {
                with (objPlayerMelee)
                {
                    instance_destroy();//destroy any weapon if one exists
                }
            }
                    canMove = false;//cannot move
                    canCrouch = false;//^^
                    attacking = false;//if the player was attacking, not anymore
                    crouching = false;//^^
                    canBeHurt = false;//obviously, the player is dead...
                    landed = false;//no, we arent landing to play a sound effect
                    turning = false;//if the player was turning, not anymore
                    onSlope = false;//redundancy to prevent slope code
                    canJump = false;//prevent jumping
                    jumpCount = 0;//prevent jumping
                    acceleration = 0;//player is no longer moving
             //////////////////////////////////   
             //Hard coded vertical movement up                 
                if (vAcceleration &gt; 4)
                {
                    if (!place_meeting(x,y-vAcceleration-1,objSolidParent))
                        y = y - vAcceleration;
                    vAcceleration = vAcceleration - .5;
                     image_speed -= 0.05;
                     image_angle -= -1;
                    
                }
                else if (vAcceleration &lt;= 4 &amp;&amp; vAcceleration &gt; 0)
                {
                    
                    if (!place_meeting(x,y-vAcceleration-1,objSolidParent))
                        y = y - vAcceleration;
                    vAcceleration -= .15;
                    if (image_speed &gt; .01)
                    {
                        image_speed -= .05;
                        image_angle -= -1;
                    }
                }
                else//once the player stops moving up, drop pixelated blood &gt;_&lt;
                {   
                    
                    instance_create(x + random_range(-16,12),y,objSFXBlood);//our blood sfx
                    drawRed = true;//draw the player sprite in red color
                    mask_index = -1;//no collision mask needed
                    vAcceleration = 0;//player is no longer moving up or down
                    if (room_speed &gt; 10)//slow everything down for dramatic effect
                    {
                        room_speed -= 1;
                    }
                    if (image_speed &gt; 0)//ditto
                    {
                        image_speed -= 0.01;
                        //image_angle -= image_xscale*-4;
                    }
                    else
                    {
                        image_alpha -= 0.02;
                        image_index = 3;
                        image_speed = 0;
                        if (restartRoom == false)
                        {
                            restartRoom = true;
                            alarm[10] = 30;//small time frame before we restart the room
                        }
                        //temporary to restart the room
                    }
                    //perhaps add in the dieing dissolve animation here
    
                }
                break;
        }
    
        
        case "attack"://controls bools that other actions are based on and creates some sub items if conditions are met
        {
            canMove = false;//player cannot move while attacking
            canJump = false;//player cannot jump while attacking(assuming they already jumped, fell, or are standing on the ground)
                    
            if ((image_index &gt; attackMaxFrames) || (throwSubItem == true &amp;&amp; image_index &gt; 2.2))//checking to see if our animation has ended to restore state of the player
            {
                canAttack = true;//the player can always attack again after attacking
                canJump = true;//restore the ability to jump
                if (crouching == false)//if the player is not crouching(ie was not crouched when they attacked)
                {
                    state = "idle";
                    canMove = true;
                    canCrouch = true;
                }
                else if (crouching == true)//if they were crouched, return the player to a crouched state
                {
                    state = "crouch";
                    crouching = false;
                    image_index = 0;
                    image_speed = 0;
                    sprite_index = sprCrouch;
                }
                if (instance_exists(objPlayerMelee))
                {
                    with (objPlayerMelee)
                    {
                        instance_destroy();//make sure we destroy our weapon since we are done attacking
                    }
                }
                if (throwSubItem == true)//if the player is throwing a sub item instead of using their melee weapon
                {
                    if (global.playerSubItem == 0)//throwing the sub item instead of attacking
                        instance_create(x+16*image_xscale,y-14,objSubKnife);
                    else if (global.playerSubItem == 1)
                        instance_create(x+16*image_xscale,y-14,objSubAxe);
                    throwSubItem = false;//we are no longer throwing an item since we just threw one
                }
            }
            break;
        }
                
        case "idle"://IDLE or standing still || basically just sets a sprite, image_speed, and a collision mask
        {
            if (sprite_index != sprIdle)
            {
                sprite_index = sprIdle;
                image_speed = idle_animation_speed;
            }
            mask_index = sprMaskVertical;
            break;
        }
        case "walk"://walking
        {
            if (turning == true)//if we are changing directions
            {
                if (image_index &gt; 10 &amp;&amp; sprite_index == sprTurn)//at the 11th sprite image, we are no longer turning
                {
                    turning = false;
                    image_index = 0;
                    sprite_index = sprWalk;
                }
            }
            else if (turning == false)//we are not turning
            {
                image_speed = walk_animation_speed;
                if (image_index &gt;= 13 &amp;&amp; sprite_index == sprStartWalk || (landed == true))//at the 14th sprite image, we are no longer starting to walk but are in a full walking cycle
                {
                    image_index = 0;
                    sprite_index = sprWalk;
                    landed = false;
                }
                 
            }
            mask_index = sprMaskVertical;//collision mask
            break;
        }
        case "crouch"://crouching
        {
            if (image_index &gt; 2 &amp;&amp; sprite_index != sprCrouch)//sprite at the time of this check would be sprStartCrouch
            {
                image_speed = 0;
                sprite_index = sprCrouch;
            }
            if (!keyboard_check(vk_down))//if the player is no longer holding the down arrow key, stand them up
            {
                sprite_index = sprStand;
                image_speed = walk_animation_speed;
                state = "stand";
            }
            mask_index = sprMaskVertical;//change to a crouching mask !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            break;
        } 
        case "stand"://standing back up after something
        {
            canMove = false;//cant walk until we are standing up
            canCrouch = false;//ditto
            canJump = false;//ditto
            canAttack = false;//broken record
            if (image_index &gt; 2 &amp;&amp; sprite_index = sprStand)//at the 3rd sprite image, we are now standing, so let's set our state to idle
            {
                state = "idle"
                canMove = true;//yay, we can move again
                canCrouch = true;//holy crap
                canJump = true;//blah blah
                canAttack = true;//this is a given
            }
            mask_index = sprMaskVertical;//collision mask
            break;
        }    
        case "jump"://Jumping - contains code for image speeds, sprites, and hard coded vertical speed accleration
        {
            if (attacking == true)//if you are attacking , this is different from the "attacking" state
            {
                if (sprite_index != sprWeaponJump)//if the animation does not show we are attacking, set it as such
                {
                    image_index = 0;
                    image_speed = attackSpeed;
                    sprite_index = sprWeaponJump;
                }
                else if (sprite_index == sprWeaponJump )//if we are showing the correct jump attack animation
                {
                    if (image_index &gt; 4 || (image_index &gt; 2.2 &amp;&amp; throwSubItem == true))//if we reached the end of the jump attack animation, or if we threw a sub item
                    {
                        
                        image_speed = walk_animation_speed;
                        sprite_index = sprJumpForward;//assuming we are still jumping, let's show the jump animation again
                        attacking = false;//no longer attacking
                        canAttack = true;//we can attack again
                        if (instance_exists(objPlayerMelee))
                        {
                            with (objPlayerMelee)
                            {
                                instance_destroy();//destroy any existing weapons
                            }
                        }
                        if (throwSubItem == true)//throw some sub items
                        {
                            if (global.playerSubItem == 0)
                            {  //throwing the sub item instead of attacking
                                
                                instance_create(x+16*image_xscale,y-14,objSubKnife);
                            }
                            else if (global.playerSubItem == 1)
                                instance_create(x+16*image_xscale,y-14,objSubAxe);
                            throwSubItem = false;
                        }
                        
                    }
                }
            }
            onSlope = false;//if we are jumping, we are obviously no longer standing on a slope
            switch(sprite_index)//this sets a loop point in the current sprite_index so that we arent seeing the beginning part of the sprite
            {
                case sprJumpStraight:
                {
                    if (image_index &gt; 7)
                    {
                        image_index = 4;
                    }
                    break;
                }
                case sprJumpForward:
                {
                    if (image_index &gt; 5)
                    {
                        image_index = 2;
                    }
                   break;
                }
            }
            mask_index = sprMaskVertical;
            ///////////////////////////////   SWITCH TO FALLING IF S NOT PRESSED
            if (!keyboard_check(ord('S')))
            {
                if (vAcceleration &gt; 0) //if our upward acceleration is higher than 0
                {
                    vAcceleration = 1;//slows down our ascend acceleration to almost nothing
                    vAcceleration = vAcceleration * -1;
                }
                    state = "fall";//change our state to falling
                    if (attacking == false)//if we are not attacking, set the sprite to falling
                    {
                        image_index = 0;
                        sprite_index = sprFall;
                    }
                    canJump = false;//obviously, we cannot jump
                    jumpCount = 0;//change this to a -= 1 if you want double jumps and remove the above bool but add a check for it
            }    
             //////////////////////////////////   
             //Slowing down our ascension as we near the top of a full strength jump
                if (vAcceleration &gt; 2)
                {
                    if (!place_meeting(x,y-vAcceleration-1,objSolidParent))
                        y = y - vAcceleration;
                    vAcceleration = vAcceleration - .5;
                }
                else if (vAcceleration &lt;= 2 &amp;&amp; vAcceleration &gt; 0)
                {
                    if (!place_meeting(x,y-vAcceleration-1,objSolidParent))
                        y = y - vAcceleration;
                    vAcceleration -= .2;
                    if (sprite_index != sprFall)
                    {
                        if (attacking == false)
                        {
                            image_index = 0;
                            image_speed = walk_animation_speed /1.5;
                            sprite_index = sprFall;
                        }
                    }
                }
                else //we reached the max height, so it's time to fall
                {   
                    state = "fall";
                    vAcceleration = 0;
                    if (attacking == false)//if we are not attacking
                    {
                        image_speed = walk_animation_speed /1.5;
                        sprite_index = sprFall;
                        if (instance_exists(objPlayerMelee))
                        {
                            with (objPlayerMelee)
                            {
                                instance_destroy();//if by some strange chance a melee weapon exists, destroy it
                            }
                        }
                    }
                
                    /*
    
                    */
                } 
                break;
        }
        case "fall"://contains code for sprites, image speed, and hard coded gravity
        {
            mask_index = sprMaskVertical;//collision mask
            if (attacking == true)//attacking while falling
            {
                if (sprite_index != sprWeaponFall &amp;&amp; sprite_index != sprWeaponJump)//if we are not showing the correct attack animation, change the animation
                {
                    image_index = 0;
                    image_speed = attackSpeed;
                    sprite_index = sprWeaponFall;
                }
                else if (sprite_index == sprWeaponFall || sprite_index == sprWeaponJump)//if we are playing the attack animation 
                {
                    if (image_index &gt; 3.8 || (image_index &gt; 2.2 &amp;&amp; throwSubItem == true))//if the sprite is at the end or if we throw a sub item
                    {
                        image_speed = walk_animation_speed;
                        sprite_index = sprFall;//reset the player's sprite to falling
                        attacking = false;//we are no longer attacking
                        canAttack = true;//we can attack again
                        if (instance_exists(objPlayerMelee))
                        {
                            with (objPlayerMelee)
                            {
                                instance_destroy();//if there is a weapon, destroy it
                            }
                        }
                        if (throwSubItem == true)//throwing the sub item instead of attacking
                        {
                            if (global.playerSubItem == 0)
                            {
                                instance_create(x+16*image_xscale,y-14,objSubKnife);
                            }
                            else if (global.playerSubItem == 1)
                                instance_create(x+16*image_xscale,y-14,objSubAxe);
                            throwSubItem = false;//we are no longer throwing a sub item
                        }
                        
                    }
                }
            }
            if(image_index &gt; 8 &amp;&amp; sprite_index == sprFall)//playing a static frame if the fall is going on too long
            {
                image_speed = 0;
            }
    
            if (!place_meeting(x,y+vAcceleration,objSolidParent) &amp;&amp; !place_meeting(x,y+vAcceleration,objSlopesParent))//increasing gravity the longer we arent touching a solid surface
            {
                yCounter += 1;
                y = y + vAcceleration;
                if (vAcceleration &lt;= 2)
                {
                   
                    vAcceleration += .2;
                }
                else if (vAcceleration &gt; 2 &amp;&amp; vAcceleration &lt;= maxFallSpeed)//fall even faster until we reach a max velocity
                {
                    vAcceleration += .5;
                    
                }
                else
                {
                    vAcceleration = maxFallSpeed;
                }
            }
            else  if (place_meeting(x,y+vAcceleration,objSolidParent) || place_meeting(x,y+vAcceleration,objSlopesParent))//when we hit a surface
            {
                vAcceleration = 0;//vertical speed is 0
                move_contact_solid(270,20);//this 100% makes sure we are now resting on the ground/platform/etc and not hovering down to it
                if (yCounter &gt; 4)
                {
                    
                    yCounter = 0;
                }
                if (instance_exists(objPlayerMelee))
                {
                    with (objPlayerMelee)
                    {
                        instance_destroy();//destroy any weapon
                    }
                    attacking = false;//we are no longer attacking
                    //useful to quick jump/fall attack combos
                }
                if (state != "idle")
                {
    
                    landed = true;//we landed, used to play a no longer existing landing sound, so add your own
                    alarm[11] = 5;//turns off landed bool after 5 ticks.
                    image_index = 0;//reset our sprite
                    image_speed = walk_animation_speed;
                    state = "idle";//we are now idle
                    canJump = true;//we can jump again
                    jumpCount = 1;//we can jump 1 time
                    canCrouch = true;//we can crouch again
                    canMove = true;//we can move again
                    canAttack = true;//we can attack again
    
                }
                
            }
            break;
        }    
    }
    
    
    //COLLISIONS
    
    if (place_meeting(x,y,objSolidParent) &amp;&amp; state != "dead" &amp;&amp; state != "crouch")//if we are stuck down into a solid
        y = y - 1;
    
    //Crouching
    if (keyboard_check(vk_down))//make the player crouch
    {
        if (canCrouch == true &amp;&amp; state != "jump" &amp;&amp; state != "fall" &amp;&amp; state != "attack")//if we arent doing these states and can crouch
        {
            canMove = false;//can move while crouched
            canCrouch = false;//we are already crouched
            acceleration = 0;//we are no longer moving
            image_index = 0;
            sprite_index = sprStartCrouch;//show the start crouch animation
            image_speed = walk_animation_speed;
            state = "crouch";//state is now considered to be crouched
        }
    }
    
    //JUMPING
    if (keyboard_check_pressed(ord('S')) &amp;&amp; (!place_meeting(x,y-16,objSolidParent)) &amp;&amp; !place_meeting(x,y+1,objPlatformVertical))//if we press S and there isnt a ceiling above the player and we arent on a vertical platform(not implemented)
    {
        if (canJump == true)//if we are able to jump
        {
            if (state != "jump")//if the state is not yet jumping
            {
                if (jumpCount = 1)//used if you want to allow double jumps
                {   
                    jumpCount = 0;
                    image_index = 0;
                    image_speed = walk_animation_speed/1.25;
                    if (acceleration == 0)
                        sprite_index = sprJumpStraight;
                    else
                        sprite_index = sprJumpForward;
                    canJump = false;
                    state = "jump";
                    vAcceleration = vAccelBase;//initial jump power/change later
                }
                else if (jumpCount &gt; 1)
                {
                    //jumpCount = 1;
                    image_index = 0;
                    canJump = true;
                    state = "jump";
                    vAcceleration = vAccelBase;//initial jump power/change later  
                }              
            }
        
        }
    }
    else if (place_meeting(x,y+1,objPlatformVertical) &amp;&amp; keyboard_check_pressed(ord('S')))//deosnt quite work 100% yet, implement at own risk
    {
        if (canJump == true)
        {
            if (state != "fall")
            {
                if (jumpCount != 0)
                {   
                    jumpCount = 0;
                    image_index = 0;
                    image_speed = walk_animation_speed/1.25;
                    //if (!instance_exists(objPlayerWeapon))  implement later
                        sprite_index = sprFall;
                    canJump = false;
                    state = "fall";
                }            
            }
        }
    }
    //Movement----------------------------------------
    if (canMove == true)//if we can move
    {
        frames_shown = round(image_index);
        //Horizontal movement checking----------------------------------------------------------------------------
        if keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left) //moving to the right
        {
            if (image_xscale == -1 &amp;&amp; (state == "idle" || state == "walk"))//if we are turning from looking from the left, set the animation to turning
            {
                image_index = 0;
                image_speed = walk_animation_speed/1.5;
                turning = true;
                sprite_index = sprTurn;
                image_xscale = 1;
                state = "walk";//we are now walking
            }
            else if (image_xscale == 1)//if we are already looking right
            {
                if (state == "idle")//if we were standing still, set the animation to starting to walk
                {
                    turning = false;//we are not turning
                    image_index = 0;
                    state = "walk";//we are now walking
                    image_speed = walk_animation_speed;
                    sprite_index = sprStartWalk;
                } 
            }
            acceleration = 30;//this is a direct acceleration rate.  code will be needed here if you need a gradual increase such that if you are on ice or something
            scrAccelerateRight();//run the script for moving right
            if (state == "jump" || state == "fall")
            {
                if (image_xscale != 1 &amp;&amp; attacking == false)
                {
                    image_xscale = 1;
                }
            }
    
        }
        if keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right) //left
        {
            if (image_xscale == 1 &amp;&amp; (state == "idle" || state == "walk"))//if we are turning from looking right
            {
                image_index = 0;
                image_speed = walk_animation_speed/1.5;
                turning = true;//we are turning
                sprite_index = sprTurn;//play the turn around animation
                image_xscale = -1;
                state = "walk";//we are walking
            }
            else if (image_xscale == -1)//if we are already looking left
            {
                if (state == "idle")//if we are standing still, set animation to starting to walk
                {
                    turning = false;
                    image_index = 0;
                    state = "walk";
                    image_speed = walk_animation_speed;
                    sprite_index = sprStartWalk
                }
                else
                {
    
                /////////////////////////////
                }
            }
            acceleration = -30;//this is a direct acceleration rate.  code will be needed here if you need a gradual increase such that if you are on ice or something
            scrAccelerateLeft();//play the script for accelerating to the left
            if (state == "jump" || state == "fall")
            {
                if (image_xscale != -1 &amp;&amp; attacking == false)
                {
                    image_xscale = -1;
                }
            }       
    
        }   
        if (!keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)) || (keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_left))//if both left and right are pressed at the same time or not at all
        {
           acceleration = 0;
           if (state == "walk")//just a redundancy check to prevent bugs
           {
                state = "idle";//we are no longer walking
                image_index = 0;
                image_speed = idle_animation_speed;
                sprite_index = sprIdle;
           }
        }
        
        if (acceleration != 0)//if our acceleration is anything but 0, we run our script to update our position
        {
            if (!place_meeting(x+(1*image_xscale),y,objSolidParent))
                scrUpdatePosition();  
        }
        
        
    }//END MOVEMENT CODE

}//global pause check--------------------------------------------------------------   
else if (global.paused == true)
{
    //image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this determines if we are drawing red over our sprite which signifies we are dead
if (drawRed == true)
{
    draw_set_color(c_red);
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, image_angle, c_red, image_alpha);
}
else//or still alive
{
    draw_set_color(c_white);
    draw_self();
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//used for testing purposes, this is what should happen when the player collides
//with an enemy or something that damages them and the player's health is 
//going to be 0 or less than 0
//Basically, this sets the player to being dead
state = "dead";
image_xscale = 1;
vAcceleration = 6;
image_speed = 2;
global.playerHealth = 0;
image_index = 0;
sprite_index = sprDie;
audio_stop_all();
//play a death sound here
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.paused == false &amp;&amp; state != "dead")//if the game isn't paused and the player is not dead
{
    if (canAttack == true &amp;&amp; state != "stand")//if we can attacking and are not standing up
    {
        
        //Play a sound here
        image_index = 0;
        
        canAttack = false;//we cannot attack since we are already attacking
        canJump = false;//we cannot jump if we are already attacking
        if (state == "jump" &amp;&amp; attacking == false)//if we are already jumping but want to attack
        {
            attackMaxFrames = 4.8;
            canCrouch = false;//obviously, we cannot crouch 
            attacking = true;//we are attacking
            if (!keyboard_check(vk_up) || (keyboard_check(vk_up) &amp;&amp; global.playerHearts &lt;= 0))//if we are not pressing up
                instance_create(x,y,objPlayerMelee);//create a melee weapon object
            else if (global.playerHearts &gt; 0)//else, if we are pressing up to throw a sub item and have hearts to do so
            {
                global.playerHearts -= 1;
                throwSubItem = true;
            }
        }
        else if (state == "fall" &amp;&amp; attacking == false)//if we are falling and want to attack
        {
            attackMaxFrames = 4.8;
            canCrouch = false;
            attacking = true;
            if (!keyboard_check(vk_up) || (keyboard_check(vk_up) &amp;&amp; global.playerHearts &lt;= 0))//if we are not pressing up
                instance_create(x,y,objPlayerMelee);//create a melee weapon object
            else if (global.playerHearts &gt; 0)//else, if we are pressing up to throw a sub item and have hearts to do so
            {
                global.playerHearts -= 1;
                throwSubItem = true;
            }
        }
        else if (state != "jump" &amp;&amp; state != "fall")//if the player is not jumping or falling but wants to attack
        {
            if (state == "walk" || state == "idle")//these are used to see if the player is on the ground but not crouched
            {
                state = "attack";//we are now setting the state to attacking
                image_index = 0;
                image_speed = attackSpeed;
                canMove = false;//can't move while attacking
                sprite_index = sprWeaponNormal;//normal standing attack animation
                attackMaxFrames = 10;//the amount of images to cycle through
                acceleration = 0;//since we are no longer moving, we stop acceleration
                canCrouch = false;//we cannot crouch
                canJump = false;//we cannot jump
                if (!keyboard_check(vk_up) || (keyboard_check(vk_up) &amp;&amp; global.playerHearts &lt;= 0))//if we are not pressing up
                    instance_create(x,y,objPlayerMelee);//create a melee weapon object
                else if (global.playerHearts &gt; 0)//else, if we are pressing up to throw a sub item and have hearts to do so
                {
                    global.playerHearts -= 1;
                    throwSubItem = true;
                }
            }
            else if (state == "crouch")//if the player is crouched and wants to attack
            {
                state = "attack";//we are attacking
                image_index = 0;
                image_speed = attackSpeed;
                canMove = false;//we cannot move
                sprite_index = sprWeaponCrouch;
                attackMaxFrames = 9;//amount of images to cycle through
                crouching = true;//we are crouching, more of a redundancy check for bugs
                acceleration = 0;//see above
                canJump = false;//we cannot jump
                if (!keyboard_check(vk_up) || (keyboard_check(vk_up) &amp;&amp; global.playerHearts &lt;= 0))//if we are not pressing up
                    instance_create(x,y,objPlayerMelee);//create a melee weapon object
                else if (global.playerHearts &gt; 0)//else, if we are pressing up to throw a sub item and have hearts to do so
                {
                    global.playerHearts -= 1;
                    throwSubItem = true;
                }
            }
        }
    }
}//end global pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_olive ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_red ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_fuchsia ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_teal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_black;
global.playerSubItem = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawcolor = c_white;
global.playerSubItem = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
