<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDoorMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 0;
door_type = "left";//default for testing purposes
if (door_type == "right")
xx = 270;
else if (door_type == "left")
xx = 90;
texDoor = background_get_texture(texDoor1);
state = "closed"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == "open")
{
    if (instance_exists(objPlayer))
    {
        if (distance_to_object(objPlayer) &gt; 48)
        {
            if (state != "close")
            {
                state = "close";
                
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != "open")
{
    state = "open";
        
    if (instance_exists(objPlayer))
    {
        objPlayer.state = "door";
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objHUD))
{
    if (global.paused == false || objHUD.state == "game")
    {
        if (state == "open")
        {
            //drawing the 3d crap
            d3d_start();
            //d3d_transform_set_identity();
            d3d_transform_add_rotation_y(xx);
            if (xx &lt; 180)
            {
                xx += 2;
            }
            else
            {
                if (instance_exists(objPlayer))
                {
                    if (objPlayer.state == "door")
                    {
                        objPlayer.state = "idle";
                        with (objPlayer)
                        {
                            canMove = true;
                            canCrouch = true;
                            attacking = false;
                            crouching = false;
                            canBeHurt = true;
                            landed = false;
                            turning = false;
                            onSlope = false;
                            canJump = true;
                            jumpCount = 1;
                        }
                    }
                }
            }
                //xx = 0;
       
            d3d_transform_add_translation((x), y, 0);
            
            
            //d3d_transform_set_translation(160, 120, 32);//sets the coffin to the center of the screen
            //d3d_transform_set_rotation_y(xx);doesnt fuckin work
            
            d3d_primitive_begin_texture(pr_trianglestrip, texDoor);
            //front facing of the coffin
            d3d_vertex_texture(0,-32,-4, 0, 0);
            d3d_vertex_texture(+36,-32,-4, 0.8,0);
            d3d_vertex_texture(0,+32,-4, 0, 1);
            d3d_vertex_texture(36,+32,-4, 0.8, 1);
            //right side of the coffin starting from the bottom right corner of the front
            d3d_vertex_texture(+36,+32,-4, 0.84, 1);
            d3d_vertex_texture(+36,+32,+4, 1, 1);
            d3d_vertex_texture(+36,-32,-4, 0.84, 0);
            d3d_vertex_texture(+36,-32,+4, 1, 0);
            d3d_primitive_end();//end the drawing
            
            d3d_transform_set_identity();
            
            
            d3d_end();
            
        }//end check for the door opening
        else if (state == "close")
        {
            //drawing the 3d crap
            d3d_start();
            //d3d_transform_set_identity();
            d3d_transform_add_rotation_y(xx);
            if (xx &gt; 90)
            {
                xx -= 2;
            }
            else
            {
                state = "closed";
                if (instance_exists(objPlayer))
                {
                    if (objPlayer.state == "door")
                    {
                        objPlayer.state = "idle";
                        with (objPlayer)
                        {
                            canMove = true;
                            canCrouch = true;
                            attacking = false;
                            crouching = false;
                            canBeHurt = true;
                            landed = false;
                            turning = false;
                            onSlope = false;
                            canJump = true;
                            jumpCount = 1;
                        }
                    }
                }
            }
                //xx = 0;
       
            d3d_transform_add_translation((x), y, 0);
            
            
            //d3d_transform_set_translation(160, 120, 32);//sets the coffin to the center of the screen
            //d3d_transform_set_rotation_y(xx);doesnt fuckin work
            
            d3d_primitive_begin_texture(pr_trianglestrip, texDoor);
            //front facing of the coffin
            d3d_vertex_texture(0,-32,-4, 0, 0);
            d3d_vertex_texture(+36,-32,-4, 0.8,0);
            d3d_vertex_texture(0,+32,-4, 0, 1);
            d3d_vertex_texture(36,+32,-4, 0.8, 1);
            //right side of the coffin starting from the bottom right corner of the front
            d3d_vertex_texture(+36,+32,-4, 0.84, 1);
            d3d_vertex_texture(+36,+32,+4, 1, 1);
            d3d_vertex_texture(+36,-32,-4, 0.84, 0);
            d3d_vertex_texture(+36,-32,+4, 1, 0);
            d3d_primitive_end();//end the drawing
            
            d3d_transform_set_identity();
            
            
            d3d_end();
            
        }
        else if (state == "closed")
        {
             draw_background_part(texDoor1, 37, 0, 8, 64, x-4, y-32);
        }
    }//end global.paused check
}//end instance check for the hud(ie menu)
            
            
            
            
            
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
